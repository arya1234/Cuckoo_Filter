# -*- coding: utf-8 -*-
"""Copy of fraud-detection-using-randomforest-smote-tuning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/164ykGEr5mtKofx_KGwl7K56gssVJyvo0
"""
# Define a function to create and populate a Cuckoo Filter with legitimate users
def Filter(legit_users_list):
  # Define a CuckooFilter class with insert, contains, delete methods
  class CuckooFilter:
    # Constructor to initialize Cuckoo Filter parameters
    def __init__(self, capacity, fingerprint_size, bucket_size):
        self.capacity = capacity
        self.fingerprint_size = fingerprint_size
        self.bucket_size = bucket_size
        self.buckets = [None] * capacity

    # Hash function to generate an index for a given data
    def hash_function(self, data):
        sha256_hash = hashlib.sha256(data.encode()).hexdigest()
        return int(sha256_hash, 16) % self.capacity

    # Extracts a fingerprint from data
    def fingerprint(self, data):
        sha256_hash = hashlib.sha256(data.encode()).hexdigest()
        return int(sha256_hash[:self.fingerprint_size], 16)

     # Insert a fingerprint into the Cuckoo Filter
    def insert(self, data, max_retries=500):
        fp = self.fingerprint(data)
        index1 = self.hash_function(data)
        index2 = (index1 ^ self.hash_function(str(fp))) % self.capacity

        for _ in range(max_retries):
            if self.buckets[index1] is None:
                self.buckets[index1] = [0] * self.bucket_size

            if self.buckets[index2] is None:
                self.buckets[index2] = [0] * self.bucket_size

            if 0 in self.buckets[index1]:
                self.buckets[index1][self.buckets[index1].index(0)] = fp
                return True
            elif 0 in self.buckets[index2]:
                self.buckets[index2][self.buckets[index2].index(0)] = fp
                return True
            else:
                index = index1 if len(self.buckets[index1]) < len(self.buckets[index2]) else index2
                evicted_fp = self.buckets[index][0]
                self.buckets[index][0] = fp
                fp = evicted_fp
                index1 = self.hash_function(str(evicted_fp))
                index2 = (index1 ^ self.hash_function(str(fp))) % self.capacity

        return False

    # Check if a fingerprint is present in the Cuckoo Filter
    def contains(self, data):
        fp = self.fingerprint(data)
        index1 = self.hash_function(data)
        index2 = (index1 ^ self.hash_function(str(fp))) % self.capacity

        return self.buckets[index1] and fp in self.buckets[index1] or \
               self.buckets[index2] and fp in self.buckets[index2]
      
    # Delete a fingerprint from the Cuckoo Filter
    def delete(self, data):
        fp = self.fingerprint(data)
        index1 = self.hash_function(data)
        index2 = (index1 ^ self.hash_function(str(fp))) % self.capacity

        if self.buckets[index1] and fp in self.buckets[index1]:
            self.buckets[index1][self.buckets[index1].index(fp)] = 0
            return True
        elif self.buckets[index2] and fp in self.buckets[index2]:
            self.buckets[index2][self.buckets[index2].index(fp)] = 0
            return True

        return False
  # Read legitimate user IDs from a file
  import_file_path = legit_users_list
  with open(import_file_path, 'r') as file:
    top_50_legitimate_users = [line.strip() for line in file]

  # Cuckoo Filter to maintain a whitelist of legitimate users
  cuckoo_filter = CuckooFilter(capacity=1000, fingerprint_size=2,bucket_size=3)

  # Assuming you have a list of legitimate user IDs
  legitimate_users = top_50_legitimate_users
  # Insert legitimate user IDs into the Cuckoo Filter
  for user_id in legitimate_users:
    cuckoo_filter.insert(user_id)

  return cuckoo_filter




def main(csv,user_list):
  cuckoo_filter = Filter(user_list)

  # Read CSV data and preprocess
  X_1 = pd.read_csv(csv)
  X_1.drop(columns=['transaction_id'],inplace=True)
  enc = OrdinalEncoder(dtype=np.int64)
  enc.fit(X_1.loc[:, ['category', 'merchant', 'job']])
  X_1.loc[:, ['category', 'merchant', 'job']] = enc.transform(X_1[['category', 'merchant', 'job']])
  
  # Function to get transaction data for a user (replace this with your actual function)
  def get_transaction_data_for_user(user_id):
    # Replace this with your logic to fetch transaction data for the given user_id
    # This function should return the relevant features of the transaction
    transaction_data =  (X_1[X_1['First_Last'] == user_id].iloc[0]).copy()
    f = transaction_data.drop(['First_Last'])
    return np.array(f)
  
  # Set a fraud threshold
  fraud_threshold = 0.5
  i = 0
  #Load a pre-trained Random Forest model
  rf_model = joblib.load('D:/CS5800/Algo/random_forest_model.joblib')
  
  # Check if a user ID is in the whitelist before making a prediction
  user_to_check = list(set(np.array(X_1['First_Last'])))

  # Take user input for user_to_check list
  user_input = input("Enter user IDs (comma-separated) to check (leave empty for default list): ")
  if user_input:
    user_to_check = user_input.split(',')
  else:
    user_to_check = list(set(np.array(X_1['First_Last'])))
  for user in user_to_check:
    if cuckoo_filter.contains(user):
      print(f"{user} is in the whitelist")
    else:
      transaction_data = get_transaction_data_for_user(user)
      prediction_proba = rf_model.predict_proba(transaction_data.reshape(1, -1))[:, 1]
      fraud_probability = prediction_proba  # Probability of being fraudulent
      if fraud_probability > fraud_threshold:
        i = i + 1
        print(f"Suspicious activity detected by {user}! Probability of fraud: {fraud_probability}")
        if i > 10:
            break



import joblib
import pandas as pd
from sklearn.preprocessing import OrdinalEncoder
import pandas as pd
import numpy as np
import warnings

# Ignore all warnings
warnings.filterwarnings("ignore")

# Import hashlib for hash functions
import hashlib

# Set file paths for user-list and csv_data
user_list = 'D:/CS5800/Algo/top_50_legitimate_users.txt'
csv_data = 'D:/CS5800/Algo/X_1.csv'

#Calling the Main function
if __name__ == '__main__':
  main(csv_data,user_list)



